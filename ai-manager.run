#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$SCRIPT_DIR/venv"
PYTHON_MIN_VERSION="3.12"
REQUIRED_SPACE_GB=50

LOG_FILE="$SCRIPT_DIR/logs/deployment.log"
mkdir -p "$(dirname "$LOG_FILE")"

log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')] INFO:${NC} $1" | tee -a "$LOG_FILE"
}

check_system_requirements() {
    log "üîç Checking system requirements..."
    
    if ! command -v python3 &> /dev/null; then
        error "Python 3 is not installed"
        exit 1
    fi
    
    python_version=$(python3 --version 2>&1 | grep -oP '\d+\.\d+')
    if ! command -v bc &> /dev/null; then
        warn "bc not installed, installing..."
        sudo apt-get update && sudo apt-get install -y bc
    fi
    
    if [[ $(echo "$python_version >= $PYTHON_MIN_VERSION" | bc -l) -eq 0 ]]; then
        error "Python $PYTHON_MIN_VERSION+ required. Current version: $python_version"
        exit 1
    fi
    
    log "‚úÖ Python $python_version detected"
    
    available_space=$(df "$SCRIPT_DIR" | awk 'NR==2 {print int($4/1024/1024)}')
    if [[ $available_space -lt $REQUIRED_SPACE_GB ]]; then
        warn "Low disk space: ${available_space}GB available, ${REQUIRED_SPACE_GB}GB recommended"
    fi
    
    total_memory=$(free -g | awk 'NR==2{print $2}')
    if [[ $total_memory -lt 16 ]]; then
        warn "Low memory: ${total_memory}GB detected, 16GB+ recommended for optimal performance"
    fi
    
    log "‚úÖ System requirements check completed"
}

install_system_dependencies() {
    log "üì¶ Installing system dependencies..."
    
    if command -v apt-get &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y imagemagick ffmpeg python3-venv python3-pip git curl bc build-essential
    elif command -v yum &> /dev/null; then
        sudo yum install -y ImageMagick ffmpeg python3 python3-pip git curl bc gcc gcc-c++ make
    elif command -v dnf &> /dev/null; then
        sudo dnf install -y ImageMagick ffmpeg python3 python3-pip git curl bc gcc gcc-c++ make
    elif command -v pacman &> /dev/null; then
        sudo pacman -S --noconfirm imagemagick ffmpeg python python-pip git curl bc base-devel
    else
        warn "Unknown package manager. Please install ImageMagick, FFmpeg, and build tools manually"
    fi
    
    log "‚úÖ System dependencies installed"
}

setup_python_environment() {
    log "üêç Setting up Python environment..."
    
    if [[ ! -d "$VENV_DIR" ]]; then
        python3 -m venv "$VENV_DIR"
        log "‚úÖ Virtual environment created"
    else
        log "‚úÖ Virtual environment already exists"
    fi
    
    source "$VENV_DIR/bin/activate"
    
    pip install --upgrade pip
    
    log "‚úÖ Python environment ready"
}

install_python_dependencies() {
    log "üìö Installing Python dependencies..."
    
    source "$VENV_DIR/bin/activate"
    
    pip install wheel setuptools
    
    log "üî• Installing PyTorch with CUDA support..."
    pip install torch>=2.5.0 torchvision>=0.18.0 torchaudio>=2.5.0 --index-url https://download.pytorch.org/whl/cu121
    
    pip install -r requirements.txt || {
        warn "Some packages failed to install, installing essential packages..."
        pip install fastapi uvicorn sqlalchemy pydantic pillow numpy opencv-python
    }
    
    log "‚úÖ Python dependencies installed"
}

setup_cuda() {
    log "üöÄ Setting up CUDA..."
    
    source "$VENV_DIR/bin/activate"
    
    python -c "
from backend.cuda_installer import CUDAInstaller
installer = CUDAInstaller()
success = installer.auto_setup_cuda()
if success:
    print('CUDA setup completed successfully')
else:
    print('CUDA setup skipped or failed - continuing with CPU mode')
"
    
    log "‚úÖ CUDA setup completed"
}

initialize_database() {
    log "üóÑÔ∏è Initializing database..."
    
    source "$VENV_DIR/bin/activate"
    
    mkdir -p "$SCRIPT_DIR/database"
    
    python -c "
try:
    from backend.database import init_db
    init_db()
    print('Database initialized successfully')
except Exception as e:
    print(f'Database initialization error: {e}')
    import sqlite3
    import os
    db_path = os.path.join('database', 'app.db')
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    conn = sqlite3.connect(db_path)
    conn.close()
    print('Basic database file created')
"
    
    log "‚úÖ Database initialized"
}

setup_model_directories() {
    log "üìÅ Setting up model directories..."
    
    mkdir -p "$SCRIPT_DIR/models"/{diffusion,lora,audio,video,upscaling,text}
    mkdir -p "$SCRIPT_DIR/output"
    mkdir -p "$SCRIPT_DIR/logs"
    
    chmod 755 "$SCRIPT_DIR/models" "$SCRIPT_DIR/output" "$SCRIPT_DIR/logs"
    
    log "‚úÖ Model directories created"
}

test_installation() {
    log "üß™ Testing installation..."
    
    source "$VENV_DIR/bin/activate"
    
    python -c "
import sys
import torch
import fastapi
import sqlalchemy
from config import API_HOST, API_PORT
print(f'‚úÖ Python version: {sys.version}')
print(f'‚úÖ PyTorch version: {torch.__version__}')
print(f'‚úÖ CUDA available: {torch.cuda.is_available()}')
print(f'‚úÖ FastAPI available: {fastapi.__version__}')
print(f'‚úÖ SQLAlchemy available: {sqlalchemy.__version__}')
print(f'‚úÖ Configuration loaded: API_HOST={API_HOST}, API_PORT={API_PORT}')
"
    
    python -c "
try:
    import main
    print('‚úÖ Main module imports successfully')
except Exception as e:
    print(f'‚ùå Main module import error: {e}')
"
    
    log "‚úÖ Installation test completed"
}

start_application() {
    local mode=${1:-"gui"}
    
    log "üöÄ Starting AI Manager App in $mode mode..."
    
    source "$VENV_DIR/bin/activate"
    
    case $mode in
        "gui")
            python main.py
            ;;
        "headless")
            python main.py --headless
            ;;
        "api")
            uvicorn backend.api:app --host 0.0.0.0 --port 8000 --workers 4
            ;;
        *)
            error "Unknown mode: $mode. Use 'gui', 'headless', or 'api'"
            exit 1
            ;;
    esac
}

deploy() {
    log "üéØ Starting AI Manager App deployment..."
    
    check_system_requirements
    install_system_dependencies
    setup_python_environment
    install_python_dependencies
    setup_cuda
    initialize_database
    setup_model_directories
    test_installation
    
    log "üéâ Deployment completed successfully!"
    log ""
    log "üöÄ To start the application:"
    log "   ./ai-manager.run start          # GUI mode"
    log "   ./ai-manager.run start headless # Headless mode"
    log "   ./ai-manager.run start api      # API server mode"
}

case "${1:-deploy}" in
    "deploy")
        deploy
        ;;
    "start")
        start_application "${2:-gui}"
        ;;
    "test")
        source "$VENV_DIR/bin/activate"
        test_installation
        ;;
    "clean")
        log "üßπ Cleaning up..."
        rm -rf "$VENV_DIR" "$SCRIPT_DIR/database" "$SCRIPT_DIR/logs"
        log "‚úÖ Cleanup completed"
        ;;
    "help"|"-h"|"--help")
        echo "AI Manager App Deployment Script"
        echo ""
        echo "Usage: $0 [command] [options]"
        echo ""
        echo "Commands:"
        echo "  deploy          Full deployment (default)"
        echo "  start [mode]    Start application (gui|headless|api)"
        echo "  test            Test installation"
        echo "  clean           Clean up installation"
        echo "  help            Show this help"
        echo ""
        echo "Examples:"
        echo "  $0                    # Full deployment"
        echo "  $0 start              # Start in GUI mode"
        echo "  $0 start headless     # Start in headless mode"
        echo "  $0 start api          # Start API server"
        ;;
    *)
        error "Unknown command: $1"
        echo "Use '$0 help' for usage information"
        exit 1
        ;;
esac
